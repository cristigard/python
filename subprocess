#take care of subprocess.run(...,shell=True) have security risks if USER insert command , use instead [] like i do in example
import subprocess

#execute script without function params sys.argv
result = subprocess.run(['/path/to/your/bin/python3', '/some_folder/some_sub_folder/script.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

#OR

#execute function with functions params sys.argv
result = subprocess.run(['/path/to/your/bin/python3','/some_folder/some_sub_folder/script.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 
#catch errors from subprocess in a file
#correct execution return code 0
if result.returncode != 0:
  with open('/path/to/error_file','w') as f:
    f.write(f'{result.stderr}')

#else
import subprocess
rsync_command = "rsync -a -e 'sshpass -p 'pass' ssh' sgapi@192.168.111.55:/home/sgapi/SagaApi /mnt/hgfs/shared/test"
try:
    subprocess.run(rsync_command, shell=True, check=True,stderr=subprocess.PIPE, text=True )
except subprocess.CalledProcessError as rsync_err:
    #get error from rsync
    print(rsync_err.stderr)
except Exception as e:
    #get python error
    print(e)

