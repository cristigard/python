#OAuth2 specifies that when using the "password flow" the client/user must send a username and password fields as form data.

1.authenticate
import requests
form_data = {
    'grant_type': 'password', #required with a fixed value of password
    'username': 'johndoe',
    'password': 'secret',
    'scope': 'items:read items:write users:read profile openid', # Strings separated by spaces
    'client_id': 'your_client_id',  # Include if applicable
    'client_secret': 'your_client_secret'  # Include if applicable }
r = requests.post("http://192.168.88.192:8000/token", data=form_data) <- request "data" will automatically encode the data in the "application/x-www-form-urlencoded" format expected by oauth2(workflow)
print(r.json()) # By the oauth2 spec, must return a JSON with an access_token and a token_type like {"access_token": "eyJhbGciOi.eyJzdWIiOiJqb2hu.GFTi2fxbqMy", "token_type": "bearer"}

!!! If cant authenticate for some reason, API must return: 
    The additional header WWW-Authenticate with value Bearer.
    Any HTTP (error) status code 401 "UNAUTHORIZED" is supposed to also return a WWW-Authenticate header.
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Invalid authentication credentials",
        headers={"WWW-Authenticate": "Bearer"},) 

2.make requests with token
import requests
# URL of the endpoint you want to access
endpoint_url = "http://192.168.88.192:8000/users/me"

# Access token obtained from the token endpoint
access_token = 'eyJhbGciOi.eyJzdWIiOiJqb2hu.GFTi2fxbqMy'

# Headers with the access token
headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json',  # Adjust content type if needed }
# Send a GET request to the protected endpoint
response = requests.get(endpoint_url, headers=headers)
# Print the response
print(response.json())



#how to extract scope in FastApi
@app.post("/token", response_model=Token)
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
    for scope in form_data.scopes:
        print(scope) 
