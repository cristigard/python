async def func1():
    print('starting func 1')
    await asyncio.sleep(1)
    return 'func1'

async def func2():
    print('start func 2')
    for i in range(10):
        print(i)
        await asyncio.sleep(0.25)
    return 'func2'

async def main():

    task1 = asyncio.create_task(func1())
    task2 =  asyncio.create_task(func2())
    
    result1 = await task1
    result2 = await  task2

asyncio.run(main())


#return from coroutine using gather
async def func1():
    print('starting func 1')
    await asyncio.sleep(1)
    return 'func1'

async def func2():
    print('start func 2')
    for i in range(10):
        print(i)
        await asyncio.sleep(0.25)
    return 'func2'

async def main():
    results = await asyncio.gather(func1(),func2())
    print(results)
    
asyncio.run(main())
