#SEND MAIL PLAIN OR WITH ATTACHMENT
# if send mail without attach use only email_body and email_subject params
# if send mail with attach use all params

# trace errors from Exceptions
import traceback

import sys
import smtplib, ssl
from email.message import EmailMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders


# Sending email
def send_mail(email_body, email_subject, file_path=None,):

    #secure context for sending mail
    context = ssl.create_default_context()

    # email login
    email_user = 'cristian.gard28@gmail.com'
    email_passwd = 'ybfdpeuvifkkntee'

    # email to/from
    email_from = "cristian.gard28@gmail.com"
    email_to = "gardcristian@gmail.com"

    # send mail without attachment
    if file_path is None:
        msg = EmailMessage()
        msg['Subject'] = email_subject
        msg['From'] = email_from
        msg['To'] = email_to
        msg.set_content(email_body)

        try:
            # Send email
            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
                server.login(email_user, email_passwd)
                server.send_message(msg)

        # if exception quit
        except Exception:
            print(traceback.format_exc())
            sys.exit()

    # send mail with attachement
    else:
        # instance of MIMEMultipart
        msg = MIMEMultipart()
        msg['Subject'] = email_subject
        msg['From'] = email_from
        msg['To'] = email_to
        body = email_body

        # attach the body with the msg instance
        msg.attach(MIMEText(body, 'plain'))

        # send mail
        try:
            # attach file
            with open(file_path, "rb") as attachment:
                # Add file as application/octet-stream
                # instance of MIMEBase and named as payload
                payload = MIMEBase('application', 'octet-stream', Name=file_path)
                # To change the payload into encoded form
                payload.set_payload(attachment.read())

            # encode into base64
            encoders.encode_base64(payload)

            # add header
            payload.add_header('Content-Disposition', 'attachment', filename=file_path)

            # attach the instance 'payload' to instance 'msg'
            msg.attach(payload)

            # Send email
            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
                server.login(email_user, email_passwd)
                server.send_message(msg)

        # if exception quit
        except Exception:
            print(traceback.format_exc())
            sys.exit()
